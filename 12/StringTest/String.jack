// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array str;
    field int length;
    field int arrLength;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength < 0) {
            do Sys.error(14);
        }
        let arrLength = maxLength;
        if (maxLength = 0) {
            let str = Array.new(1);
        } else {
            let str = Array.new(maxLength);
        }
        let length = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do str.dispose();
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if (j > length) {
            do Sys.error(15);
            return 0;
        } else {
            return str[j];
        }
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if (j > length) {
            do Sys.error(16);
        } else {
            let str[j] = c;
        }
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (arrLength = length) {
            do Sys.error(17);
        } else {
            let str[length] = c;
            let length = length + 1;
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (length = 0) {
            do Sys.error(18);
        } else {
            let length = length - 1;
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int idx, value;
        var boolean neg;
        let value = 0;
        let idx = 0;
        if (charAt(0) = 45) {
            let neg = true;
            let idx = idx + 1;
        }
        while ((idx < length) & (charAt(idx) > 47) & (charAt(idx) < 58)) {
            let value = value * 10;
            let value = value + charAt(idx) - 48;
            let idx = idx + 1;
        }
        if (neg) {
            let value = -1 * value;
        }
        return value;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let length = 0;
        if (val < 0) {
            do appendChar(45);
            let val = -1 * val;
        }
        do setPositive(val);
        return;
    }

    method void setPositive(int val) {
        var int div;
        let div = val / 10;
        if (div > 0) { 
            do setPositive(div);
        }
        do appendChar((val - (div * 10)) + 48);
        return;
    }
    
    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
