// Initialize Stack
@256        // 0
D=A        // 1
@SP        // 2
M=D        // 3
// call Sys.init 0
@Sys$ret.0        // 4
D=A        // 5
@SP        // 6
A=M        // 7
M=D        // 8
@SP        // 9
M=M+1        // 10
@LCL        // 11
D=M        // 12
@SP        // 13
A=M        // 14
M=D        // 15
@SP        // 16
M=M+1        // 17
@ARG        // 18
D=M        // 19
@SP        // 20
A=M        // 21
M=D        // 22
@SP        // 23
M=M+1        // 24
@THIS        // 25
D=M        // 26
@SP        // 27
A=M        // 28
M=D        // 29
@SP        // 30
M=M+1        // 31
@THAT        // 32
D=M        // 33
@SP        // 34
A=M        // 35
M=D        // 36
@SP        // 37
M=M+1        // 38
@SP        // 39
D=M        // 40
@5        // 41
D=D-A        // 42
@0        // 43
D=D-A        // 44
@ARG        // 45
M=D        // 46
@SP        // 47
D=M        // 48
@LCL        // 49
M=D        // 50
@Sys.init        // 51
0;JMP        // 52
(Sys$ret.0)
// function Main.fibonacci 0
(Main.fibonacci)
// push argument 0
@0        // 53
D=A        // 54
@ARG        // 55
A=D+M        // 56
D=M        // 57
@SP        // 58
A=M        // 59
M=D        // 60
@SP        // 61
M=M+1        // 62
// push constant 2
@2        // 63
D=A        // 64
@SP        // 65
A=M        // 66
M=D        // 67
@SP        // 68
M=M+1        // 69
// lt
@SP        // 70
M=M-1        // 71
A=M        // 72
D=M        // 73
@R13        // 74
M=D        // 75
@SP        // 76
A=M-1        // 77
D=M        // 78
@R13        // 79
D=M-D        // 80
@TRUE14        // 81
D;JGT        // 82
@SP        // 83
A=M-1        // 84
M=0        // 85
@DONE14        // 86
0;JMP        // 87
(TRUE14)
@SP        // 88
A=M-1        // 89
M=-1        // 90
(DONE14)
// if-goto IF_TRUE
@SP        // 91
M=M-1        // 92
A=M        // 93
D=M        // 94
@IF_TRUE        // 95
D+1;JEQ        // 96
// goto IF_FALSE
@IF_FALSE        // 97
0;JMP        // 98
// label IF_TRUE
(IF_TRUE)
// push argument 0
@0        // 99
D=A        // 100
@ARG        // 101
A=D+M        // 102
D=M        // 103
@SP        // 104
A=M        // 105
M=D        // 106
@SP        // 107
M=M+1        // 108
// return
@SP        // 109
M=M-1        // 110
A=M        // 111
D=M        // 112
@ARG        // 113
A=M        // 114
M=D        // 115
@ARG        // 116
D=M        // 117
@SP        // 118
M=D+1        // 119
@LCL        // 120
D=M        // 121
@R13        // 122
M=D        // 123
@LCL        // 124
M=M-1        // 125
A=M        // 126
D=M        // 127
@THAT        // 128
M=D        // 129
@LCL        // 130
M=M-1        // 131
A=M        // 132
D=M        // 133
@THIS        // 134
M=D        // 135
@LCL        // 136
M=M-1        // 137
A=M        // 138
D=M        // 139
@ARG        // 140
M=D        // 141
@LCL        // 142
M=M-1        // 143
A=M        // 144
D=M        // 145
@LCL        // 146
M=D        // 147
@R13        // 148
D=M        // 149
@5        // 150
A=D-A        // 151
A=M        // 152
0;JMP        // 153
// label IF_FALSE
(IF_FALSE)
// push argument 0
@0        // 154
D=A        // 155
@ARG        // 156
A=D+M        // 157
D=M        // 158
@SP        // 159
A=M        // 160
M=D        // 161
@SP        // 162
M=M+1        // 163
// push constant 2
@2        // 164
D=A        // 165
@SP        // 166
A=M        // 167
M=D        // 168
@SP        // 169
M=M+1        // 170
// sub
@SP        // 171
M=M-1        // 172
A=M        // 173
D=M        // 174
A=A-1        // 175
M=M-D        // 176
// call Main.fibonacci 1
@Main$ret.24        // 177
D=A        // 178
@SP        // 179
A=M        // 180
M=D        // 181
@SP        // 182
M=M+1        // 183
@LCL        // 184
D=M        // 185
@SP        // 186
A=M        // 187
M=D        // 188
@SP        // 189
M=M+1        // 190
@ARG        // 191
D=M        // 192
@SP        // 193
A=M        // 194
M=D        // 195
@SP        // 196
M=M+1        // 197
@THIS        // 198
D=M        // 199
@SP        // 200
A=M        // 201
M=D        // 202
@SP        // 203
M=M+1        // 204
@THAT        // 205
D=M        // 206
@SP        // 207
A=M        // 208
M=D        // 209
@SP        // 210
M=M+1        // 211
@SP        // 212
D=M        // 213
@5        // 214
D=D-A        // 215
@1        // 216
D=D-A        // 217
@ARG        // 218
M=D        // 219
@SP        // 220
D=M        // 221
@LCL        // 222
M=D        // 223
@Main.fibonacci        // 224
0;JMP        // 225
(Main$ret.24)
// push argument 0
@0        // 226
D=A        // 227
@ARG        // 228
A=D+M        // 229
D=M        // 230
@SP        // 231
A=M        // 232
M=D        // 233
@SP        // 234
M=M+1        // 235
// push constant 1
@1        // 236
D=A        // 237
@SP        // 238
A=M        // 239
M=D        // 240
@SP        // 241
M=M+1        // 242
// sub
@SP        // 243
M=M-1        // 244
A=M        // 245
D=M        // 246
A=A-1        // 247
M=M-D        // 248
// call Main.fibonacci 1
@Main$ret.28        // 249
D=A        // 250
@SP        // 251
A=M        // 252
M=D        // 253
@SP        // 254
M=M+1        // 255
@LCL        // 256
D=M        // 257
@SP        // 258
A=M        // 259
M=D        // 260
@SP        // 261
M=M+1        // 262
@ARG        // 263
D=M        // 264
@SP        // 265
A=M        // 266
M=D        // 267
@SP        // 268
M=M+1        // 269
@THIS        // 270
D=M        // 271
@SP        // 272
A=M        // 273
M=D        // 274
@SP        // 275
M=M+1        // 276
@THAT        // 277
D=M        // 278
@SP        // 279
A=M        // 280
M=D        // 281
@SP        // 282
M=M+1        // 283
@SP        // 284
D=M        // 285
@5        // 286
D=D-A        // 287
@1        // 288
D=D-A        // 289
@ARG        // 290
M=D        // 291
@SP        // 292
D=M        // 293
@LCL        // 294
M=D        // 295
@Main.fibonacci        // 296
0;JMP        // 297
(Main$ret.28)
// add
@SP        // 298
M=M-1        // 299
A=M        // 300
D=M        // 301
A=A-1        // 302
M=M+D        // 303
// return
@SP        // 304
M=M-1        // 305
A=M        // 306
D=M        // 307
@ARG        // 308
A=M        // 309
M=D        // 310
@ARG        // 311
D=M        // 312
@SP        // 313
M=D+1        // 314
@LCL        // 315
D=M        // 316
@R13        // 317
M=D        // 318
@LCL        // 319
M=M-1        // 320
A=M        // 321
D=M        // 322
@THAT        // 323
M=D        // 324
@LCL        // 325
M=M-1        // 326
A=M        // 327
D=M        // 328
@THIS        // 329
M=D        // 330
@LCL        // 331
M=M-1        // 332
A=M        // 333
D=M        // 334
@ARG        // 335
M=D        // 336
@LCL        // 337
M=M-1        // 338
A=M        // 339
D=M        // 340
@LCL        // 341
M=D        // 342
@R13        // 343
D=M        // 344
@5        // 345
A=D-A        // 346
A=M        // 347
0;JMP        // 348
// function Sys.init 0
(Sys.init)
// push constant 4
@4        // 349
D=A        // 350
@SP        // 351
A=M        // 352
M=D        // 353
@SP        // 354
M=M+1        // 355
// call Main.fibonacci 1
@Main$ret.43        // 356
D=A        // 357
@SP        // 358
A=M        // 359
M=D        // 360
@SP        // 361
M=M+1        // 362
@LCL        // 363
D=M        // 364
@SP        // 365
A=M        // 366
M=D        // 367
@SP        // 368
M=M+1        // 369
@ARG        // 370
D=M        // 371
@SP        // 372
A=M        // 373
M=D        // 374
@SP        // 375
M=M+1        // 376
@THIS        // 377
D=M        // 378
@SP        // 379
A=M        // 380
M=D        // 381
@SP        // 382
M=M+1        // 383
@THAT        // 384
D=M        // 385
@SP        // 386
A=M        // 387
M=D        // 388
@SP        // 389
M=M+1        // 390
@SP        // 391
D=M        // 392
@5        // 393
D=D-A        // 394
@1        // 395
D=D-A        // 396
@ARG        // 397
M=D        // 398
@SP        // 399
D=M        // 400
@LCL        // 401
M=D        // 402
@Main.fibonacci        // 403
0;JMP        // 404
(Main$ret.43)
// label WHILE
(WHILE)
// goto WHILE
@WHILE        // 405
0;JMP        // 406
// Program end
(END)
@END        // 407
0;JMP        // 408
