// class Main {        | Line 21
// function void main() {        | Line 27
// var int value;        | Line 28
// do Main.fillMemory(8001, 16, -1); // sets RAM[8001]..RAM[8016] to -1        | Line 29
function Main.main 1
push constant 8001
push constant 16
push constant 1
neg
call Main.fillMemory 3
pop temp 0
// let value = Memory.peek(8000);    // reads a value from RAM[8000]        | Line 30
push constant 8000
call Memory.peek 1
pop local 0
// do Main.convert(value);           // performs the conversion        | Line 31
push local 0
call Main.convert 1
pop temp 0
// return;        | Line 32
push constant 0
return
// }        | Line 33
// function void convert(int value) {        | Line 37
// var int mask, position;        | Line 38
// var boolean loop;        | Line 39
// let loop = true;        | Line 41
function Main.convert 3
push constant 1
neg
pop local 2
// while (loop) {        | Line 42
label WHILE42.TRUE
push local 2
not
if-goto WHILE42.FALSE
// let position = position + 1;        | Line 43
push local 1
push constant 1
add
pop local 1
// let mask = Main.nextMask(mask);        | Line 44
push local 0
call Main.nextMask 1
pop local 0
// if (~(position > 16)) {        | Line 46
push local 1
push constant 16
gt
not
not
if-goto IF46.TRUE
// if (~((value & mask) = 0)) {        | Line 48
push argument 0
push local 0
and
push constant 0
eq
not
not
if-goto IF48.TRUE
// do Memory.poke(8000 + position, 1);        | Line 49
push constant 8000
push local 1
add
push constant 1
call Memory.poke 2
pop temp 0
// }        | Line 50
// else {        | Line 51
goto IF48.FALSE
label IF48.TRUE
// do Memory.poke(8000 + position, 0);        | Line 52
push constant 8000
push local 1
add
push constant 0
call Memory.poke 2
pop temp 0
// }            | Line 53
label IF48.FALSE
// }        | Line 54
// else {        | Line 55
goto IF46.FALSE
label IF46.TRUE
// let loop = false;        | Line 56
push constant 0
pop local 2
// }        | Line 57
label IF46.FALSE
// }        | Line 58
goto WHILE42.TRUE
label WHILE42.FALSE
// return;        | Line 59
push constant 0
return
// }        | Line 60
// function int nextMask(int mask) {        | Line 63
// if (mask = 0) {        | Line 64
function Main.nextMask 0
push argument 0
push constant 0
eq
not
if-goto IF64.TRUE
// return 1;        | Line 65
push constant 1
return
// }        | Line 66
// else {        | Line 67
goto IF64.FALSE
label IF64.TRUE
// return mask * 2;        | Line 68
push argument 0
push constant 2
call Math.multiply 2
return
// }        | Line 69
label IF64.FALSE
// }        | Line 70
// function void fillMemory(int startAddress, int length, int value) {        | Line 74
// while (length > 0) {        | Line 75
function Main.fillMemory 0
label WHILE75.TRUE
push argument 1
push constant 0
gt
not
if-goto WHILE75.FALSE
// do Memory.poke(startAddress, value);        | Line 76
push argument 0
push argument 2
call Memory.poke 2
pop temp 0
// let length = length - 1;        | Line 77
push argument 1
push constant 1
sub
pop argument 1
// let startAddress = startAddress + 1;        | Line 78
push argument 0
push constant 1
add
pop argument 0
// }        | Line 79
goto WHILE75.TRUE
label WHILE75.FALSE
// return;        | Line 80
push constant 0
return
// }        | Line 81
