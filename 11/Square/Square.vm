// class Square {        | Line 9
// field int x, y; // screen location of the square's top-left corner        | Line 11
// field int size; // length of this square, in pixels        | Line 12
// constructor Square new(int Ax, int Ay, int Asize) {        | Line 15
// let x = Ax;        | Line 16
function Square.new 0
push constant 3
call Memory.alloc 1
pop pointer 0
push argument 0
pop this 0
// let y = Ay;        | Line 17
push argument 1
pop this 1
// let size = Asize;        | Line 18
push argument 2
pop this 2
// do draw();        | Line 19
push pointer 0
call Square.draw 1
pop temp 0
// return this;        | Line 20
push pointer 0
return
// }        | Line 21
// method void dispose() {        | Line 24
// do Memory.deAlloc(this);        | Line 25
function Square.dispose 0
push argument 0
pop pointer 0
push pointer 0
call Memory.deAlloc 1
pop temp 0
// return;        | Line 26
push constant 0
return
// }        | Line 27
// method void draw() {        | Line 30
// do Screen.setColor(true);        | Line 31
function Square.draw 0
push argument 0
pop pointer 0
push constant 1
neg
call Screen.setColor 1
pop temp 0
// do Screen.drawRectangle(x, y, x + size, y + size);        | Line 32
push this 0
push this 1
push this 0
push this 2
add
push this 1
push this 2
add
call Screen.drawRectangle 4
pop temp 0
// return;        | Line 33
push constant 0
return
// }        | Line 34
// method void erase() {        | Line 37
// do Screen.setColor(false);        | Line 38
function Square.erase 0
push argument 0
pop pointer 0
push constant 0
call Screen.setColor 1
pop temp 0
// do Screen.drawRectangle(x, y, x + size, y + size);        | Line 39
push this 0
push this 1
push this 0
push this 2
add
push this 1
push this 2
add
call Screen.drawRectangle 4
pop temp 0
// return;        | Line 40
push constant 0
return
// }        | Line 41
// method void incSize() {        | Line 44
// if (((y + size) < 254) & ((x + size) < 510)) {        | Line 45
function Square.incSize 0
push argument 0
pop pointer 0
push this 1
push this 2
add
push constant 254
lt
push this 0
push this 2
add
push constant 510
lt
and
not
if-goto IF45.TRUE
// do erase();        | Line 46
push pointer 0
call Square.erase 1
pop temp 0
// let size = size + 2;        | Line 47
push this 2
push constant 2
add
pop this 2
// do draw();        | Line 48
push pointer 0
call Square.draw 1
pop temp 0
// }        | Line 49
// return;        | Line 50
label IF45.TRUE
push constant 0
return
// }        | Line 51
// method void decSize() {        | Line 54
// if (size > 2) {        | Line 55
function Square.decSize 0
push argument 0
pop pointer 0
push this 2
push constant 2
gt
not
if-goto IF55.TRUE
// do erase();        | Line 56
push pointer 0
call Square.erase 1
pop temp 0
// let size = size - 2;        | Line 57
push this 2
push constant 2
sub
pop this 2
// do draw();        | Line 58
push pointer 0
call Square.draw 1
pop temp 0
// }        | Line 59
// return;        | Line 60
label IF55.TRUE
push constant 0
return
// }        | Line 61
// method void moveUp() {        | Line 64
// if (y > 1) {        | Line 65
function Square.moveUp 0
push argument 0
pop pointer 0
push this 1
push constant 1
gt
not
if-goto IF65.TRUE
// do Screen.setColor(false);        | Line 66
push constant 0
call Screen.setColor 1
pop temp 0
// do Screen.drawRectangle(x, (y + size) - 1, x + size, y + size);        | Line 67
push this 0
push this 1
push this 2
add
push constant 1
sub
push this 0
push this 2
add
push this 1
push this 2
add
call Screen.drawRectangle 4
pop temp 0
// let y = y - 2;        | Line 68
push this 1
push constant 2
sub
pop this 1
// do Screen.setColor(true);        | Line 69
push constant 1
neg
call Screen.setColor 1
pop temp 0
// do Screen.drawRectangle(x, y, x + size, y + 1);        | Line 70
push this 0
push this 1
push this 0
push this 2
add
push this 1
push constant 1
add
call Screen.drawRectangle 4
pop temp 0
// }        | Line 71
// return;        | Line 72
label IF65.TRUE
push constant 0
return
// }        | Line 73
// method void moveDown() {        | Line 76
// if ((y + size) < 254) {        | Line 77
function Square.moveDown 0
push argument 0
pop pointer 0
push this 1
push this 2
add
push constant 254
lt
not
if-goto IF77.TRUE
// do Screen.setColor(false);        | Line 78
push constant 0
call Screen.setColor 1
pop temp 0
// do Screen.drawRectangle(x, y, x + size, y + 1);        | Line 79
push this 0
push this 1
push this 0
push this 2
add
push this 1
push constant 1
add
call Screen.drawRectangle 4
pop temp 0
// let y = y + 2;        | Line 80
push this 1
push constant 2
add
pop this 1
// do Screen.setColor(true);        | Line 81
push constant 1
neg
call Screen.setColor 1
pop temp 0
// do Screen.drawRectangle(x, (y + size) - 1, x + size, y + size);        | Line 82
push this 0
push this 1
push this 2
add
push constant 1
sub
push this 0
push this 2
add
push this 1
push this 2
add
call Screen.drawRectangle 4
pop temp 0
// }        | Line 83
// return;        | Line 84
label IF77.TRUE
push constant 0
return
// }        | Line 85
// method void moveLeft() {        | Line 88
// if (x > 1) {        | Line 89
function Square.moveLeft 0
push argument 0
pop pointer 0
push this 0
push constant 1
gt
not
if-goto IF89.TRUE
// do Screen.setColor(false);        | Line 90
push constant 0
call Screen.setColor 1
pop temp 0
// do Screen.drawRectangle((x + size) - 1, y, x + size, y + size);        | Line 91
push this 0
push this 2
add
push constant 1
sub
push this 1
push this 0
push this 2
add
push this 1
push this 2
add
call Screen.drawRectangle 4
pop temp 0
// let x = x - 2;        | Line 92
push this 0
push constant 2
sub
pop this 0
// do Screen.setColor(true);        | Line 93
push constant 1
neg
call Screen.setColor 1
pop temp 0
// do Screen.drawRectangle(x, y, x + 1, y + size);        | Line 94
push this 0
push this 1
push this 0
push constant 1
add
push this 1
push this 2
add
call Screen.drawRectangle 4
pop temp 0
// }        | Line 95
// return;        | Line 96
label IF89.TRUE
push constant 0
return
// }        | Line 97
// method void moveRight() {        | Line 100
// if ((x + size) < 510) {        | Line 101
function Square.moveRight 0
push argument 0
pop pointer 0
push this 0
push this 2
add
push constant 510
lt
not
if-goto IF101.TRUE
// do Screen.setColor(false);        | Line 102
push constant 0
call Screen.setColor 1
pop temp 0
// do Screen.drawRectangle(x, y, x + 1, y + size);        | Line 103
push this 0
push this 1
push this 0
push constant 1
add
push this 1
push this 2
add
call Screen.drawRectangle 4
pop temp 0
// let x = x + 2;        | Line 104
push this 0
push constant 2
add
pop this 0
// do Screen.setColor(true);        | Line 105
push constant 1
neg
call Screen.setColor 1
pop temp 0
// do Screen.drawRectangle((x + size) - 1, y, x + size, y + size);        | Line 106
push this 0
push this 2
add
push constant 1
sub
push this 1
push this 0
push this 2
add
push this 1
push this 2
add
call Screen.drawRectangle 4
pop temp 0
// }        | Line 107
// return;        | Line 108
label IF101.TRUE
push constant 0
return
// }        | Line 109
