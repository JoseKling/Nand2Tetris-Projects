// class SquareGame {        | Line 19
// field Square square; // the square of this game        | Line 20
// field int direction; // the square's current direction:         | Line 21
// constructor SquareGame new() {        | Line 25
// let square = Square.new(0, 0, 30);        | Line 28
function SquareGame.new 0
push constant 2
call Memory.alloc 1
pop pointer 0
push constant 0
push constant 0
push constant 30
call Square.new 3
pop this 0
// let direction = 0;  // initial state is no movement        | Line 29
push constant 0
pop this 1
// return this;        | Line 30
push pointer 0
return
// }        | Line 31
// method void dispose() {        | Line 34
// do square.dispose();        | Line 35
function SquareGame.dispose 0
push argument 0
pop pointer 0
push this 0
call Square.dispose 1
pop temp 0
// do Memory.deAlloc(this);        | Line 36
push pointer 0
call Memory.deAlloc 1
pop temp 0
// return;        | Line 37
push constant 0
return
// }        | Line 38
// method void moveSquare() {        | Line 41
// if (direction = 1) { do square.moveUp(); }        | Line 42
function SquareGame.moveSquare 0
push argument 0
pop pointer 0
push this 1
push constant 1
eq
not
if-goto IF42.TRUE
push this 0
call Square.moveUp 1
pop temp 0
// if (direction = 2) { do square.moveDown(); }        | Line 43
label IF42.TRUE
push this 1
push constant 2
eq
not
if-goto IF43.TRUE
push this 0
call Square.moveDown 1
pop temp 0
// if (direction = 3) { do square.moveLeft(); }        | Line 44
label IF43.TRUE
push this 1
push constant 3
eq
not
if-goto IF44.TRUE
push this 0
call Square.moveLeft 1
pop temp 0
// if (direction = 4) { do square.moveRight(); }        | Line 45
label IF44.TRUE
push this 1
push constant 4
eq
not
if-goto IF45.TRUE
push this 0
call Square.moveRight 1
pop temp 0
// do Sys.wait(5);  // delays the next movement        | Line 46
label IF45.TRUE
push constant 5
call Sys.wait 1
pop temp 0
// return;        | Line 47
push constant 0
return
// }        | Line 48
// method void run() {        | Line 51
// var char key;  // the key currently pressed by the user        | Line 52
// var boolean exit;        | Line 53
// let exit = false;        | Line 54
function SquareGame.run 2
push argument 0
pop pointer 0
push constant 0
pop local 1
// while (~exit) {        | Line 56
label WHILE56.TRUE
push local 1
not
not
if-goto WHILE56.FALSE
// while (key = 0) {        | Line 58
label WHILE58.TRUE
push local 0
push constant 0
eq
not
if-goto WHILE58.FALSE
// let key = Keyboard.keyPressed();        | Line 59
call Keyboard.keyPressed 0
pop local 0
// do moveSquare();        | Line 60
push pointer 0
call SquareGame.moveSquare 1
pop temp 0
// }        | Line 61
goto WHILE58.TRUE
label WHILE58.FALSE
// if (key = 81)  { let exit = true; }     // q key        | Line 62
push local 0
push constant 81
eq
not
if-goto IF62.TRUE
push constant 1
neg
pop local 1
// if (key = 90)  { do square.decSize(); } // z key        | Line 63
label IF62.TRUE
push local 0
push constant 90
eq
not
if-goto IF63.TRUE
push this 0
call Square.decSize 1
pop temp 0
// if (key = 88)  { do square.incSize(); } // x key        | Line 64
label IF63.TRUE
push local 0
push constant 88
eq
not
if-goto IF64.TRUE
push this 0
call Square.incSize 1
pop temp 0
// if (key = 131) { let direction = 1; }   // up arrow        | Line 65
label IF64.TRUE
push local 0
push constant 131
eq
not
if-goto IF65.TRUE
push constant 1
pop this 1
// if (key = 133) { let direction = 2; }   // down arrow        | Line 66
label IF65.TRUE
push local 0
push constant 133
eq
not
if-goto IF66.TRUE
push constant 2
pop this 1
// if (key = 130) { let direction = 3; }   // left arrow        | Line 67
label IF66.TRUE
push local 0
push constant 130
eq
not
if-goto IF67.TRUE
push constant 3
pop this 1
// if (key = 132) { let direction = 4; }   // right arrow        | Line 68
label IF67.TRUE
push local 0
push constant 132
eq
not
if-goto IF68.TRUE
push constant 4
pop this 1
// while (~(key = 0)) {        | Line 71
label IF68.TRUE
label WHILE71.TRUE
push local 0
push constant 0
eq
not
not
if-goto WHILE71.FALSE
// let key = Keyboard.keyPressed();        | Line 72
call Keyboard.keyPressed 0
pop local 0
// do moveSquare();        | Line 73
push pointer 0
call SquareGame.moveSquare 1
pop temp 0
// }        | Line 74
goto WHILE71.TRUE
label WHILE71.FALSE
// } // while        | Line 75
goto WHILE56.TRUE
label WHILE56.FALSE
// return;        | Line 76
push constant 0
return
// }        | Line 77
// }        | Line 78
